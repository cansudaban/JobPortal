<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddressMaxLength" xml:space="preserve">
    <value>Address cannot exceed 200 characters.</value>
  </data>
  <data name="AddressRequired" xml:space="preserve">
    <value>Address is required.</value>
  </data>
  <data name="BenefitsMaxLength" xml:space="preserve">
    <value>Benefits cannot exceed 200 characters.</value>
  </data>
  <data name="CompanyNameMaxLength" xml:space="preserve">
    <value>Company name cannot exceed 100 characters.</value>
  </data>
  <data name="CompanyNameRequired" xml:space="preserve">
    <value>Company name is required.</value>
  </data>
  <data name="CompanyNotFound" xml:space="preserve">
    <value>Company not found.</value>
  </data>
  <data name="DescriptionMaxLength" xml:space="preserve">
    <value>Description cannot exceed 1000 characters.</value>
  </data>
  <data name="DescriptionMinLength" xml:space="preserve">
    <value>Description must be at least 10 characters.</value>
  </data>
  <data name="DescriptionRequired" xml:space="preserve">
    <value>Description is required.</value>
  </data>
  <data name="EmailAlreadyExists" xml:space="preserve">
    <value>A user with this email already exists.</value>
  </data>
  <data name="EmailRequired" xml:space="preserve">
    <value>Email is required.</value>
  </data>
  <data name="EmploymentTypeMaxLength" xml:space="preserve">
    <value>Employment type cannot exceed 50 characters.</value>
  </data>
  <data name="ExpirationDateFuture" xml:space="preserve">
    <value>Expiration date must be in the future.</value>
  </data>
  <data name="InvalidEmailFormat" xml:space="preserve">
    <value>Invalid email format.</value>
  </data>
  <data name="InvalidEmailOrPassword" xml:space="preserve">
    <value>Invalid email or password.</value>
  </data>
  <data name="InvalidPhoneNumberFormat" xml:space="preserve">
    <value>Invalid phone number format.</value>
  </data>
  <data name="JobCreatedFailedElasticsearch" xml:space="preserve">
    <value>Job created, but failed to index in Elasticsearch.</value>
  </data>
  <data name="JobCreatedSuccessfully" xml:space="preserve">
    <value>Job created successfully and indexed in Elasticsearch.</value>
  </data>
  <data name="JobDeletedSuccessfully" xml:space="preserve">
    <value>Job deleted successfully.</value>
  </data>
  <data name="JobNotFound" xml:space="preserve">
    <value>Job not found.</value>
  </data>
  <data name="JobPostingLimitExceeded" xml:space="preserve">
    <value>Job posting limit exceeded.</value>
  </data>
  <data name="JobPostingLimitGreaterThan" xml:space="preserve">
    <value>Job posting limit must be greater than 0.</value>
  </data>
  <data name="JobRetrievedSuccessfully" xml:space="preserve">
    <value>Job retrieved successfully.</value>
  </data>
  <data name="JobsFound" xml:space="preserve">
    <value>Jobs found.</value>
  </data>
  <data name="JobsRetrievedSuccessfully" xml:space="preserve">
    <value>Jobs retrieved successfully.</value>
  </data>
  <data name="JobUpdatedFailedElasticsearch" xml:space="preserve">
    <value>Job updated, but failed to update in Elasticsearch.</value>
  </data>
  <data name="JobUpdatedSuccessfully" xml:space="preserve">
    <value>Job updated successfully and indexed in Elasticsearch.</value>
  </data>
  <data name="LoginSuccess" xml:space="preserve">
    <value>Login successful.</value>
  </data>
  <data name="NoJobsFound" xml:space="preserve">
    <value>No jobs found.</value>
  </data>
  <data name="OperationFailed" xml:space="preserve">
    <value>An error occurred during the operation</value>
  </data>
  <data name="OperationSuccess" xml:space="preserve">
    <value>Operation successful</value>
  </data>
  <data name="PasswordResetSuccess" xml:space="preserve">
    <value>Password reset successfully.</value>
  </data>
  <data name="PasswordsDoNotMatch" xml:space="preserve">
    <value>Passwords do not match.</value>
  </data>
  <data name="PhoneNumberRequired" xml:space="preserve">
    <value>Phone number is required.</value>
  </data>
  <data name="PositionMaxLength" xml:space="preserve">
    <value>Position cannot exceed 100 characters.</value>
  </data>
  <data name="PositionRequired" xml:space="preserve">
    <value>Position is required.</value>
  </data>
  <data name="QualityScoreRange" xml:space="preserve">
    <value>Quality score must be between 0 and 5.</value>
  </data>
  <data name="RestrictedWordAddedSuccessfully" xml:space="preserve">
    <value>Restricted word added successfully.</value>
  </data>
  <data name="RestrictedWordInDescription" xml:space="preserve">
    <value>The description contains a restricted word: {word}.</value>
  </data>
  <data name="RestrictedWordRemovedSuccessfully" xml:space="preserve">
    <value>Restricted word removed successfully.</value>
  </data>
  <data name="RestrictedWordsRetrieved" xml:space="preserve">
    <value>Restricted words retrieved successfully.</value>
  </data>
  <data name="UserDeletedSuccess" xml:space="preserve">
    <value>User deleted successfully.</value>
  </data>
  <data name="UserNameMaxLength" xml:space="preserve">
    <value>User name cannot exceed 100 characters.</value>
  </data>
  <data name="UserNameRequired" xml:space="preserve">
    <value>User name is required.</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User not found.</value>
  </data>
  <data name="UserRegisteredSuccess" xml:space="preserve">
    <value>User registered successfully.</value>
  </data>
  <data name="UsersRetrievedSuccess" xml:space="preserve">
    <value>Users retrieved successfully.</value>
  </data>
</root>